#include <dt-bindings/zmk/matrix_transform.h>

// GPIO configuration for the board
&gpio0 {
    status = "okay";  // Ensure gpio0 is enabled
};

&gpio1 {
    status = "okay";  // Ensure gpio1 is enabled (only defined once)
};

// I2C configuration for the display
&i2c1 {
    status = "okay";  // Enable I2C interface
    sda-pin = <17>;    // Define SDA pin
    scl-pin = <20>;    // Define SCL pin
    clock-frequency = <I2C_BITRATE_FAST>; // Define I2C speed

    nice_view: display@3c {
        compatible = "zmk,nice-view";  // Set compatible property
        reg = <0x3c>;                 // Define I2C address
        label = "NiceView";           // Label the device
    };
};

&gpio1 {
    status = "okay";  // Ensure gpio1 is enabled
};

// Root node configuration
/ {
    chosen {
        zmk,kscan = &kscan0;           // Define key scan configuration
        zmk,matrix_transform = &default_transform;
        zmk,display = &nice_view;      // Point to the display device
    };

    // Keyboard matrix (6x4 left, 5x4 right)
    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <6>;  // Left half: 6 columns
        rows = <4>;     // Define number of rows
        map = <
            // Left half (18 keys)
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) 
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) 
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) 
            RC(3,2) RC(3,3) RC(3,4)
        >;
    };

    // Keyscan GPIO configuration
    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        
        diode-direction = "col2row";  // Set diode direction for the matrix
        row-gpios = <
            &gpio1 6  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)  // Row 0 (P1.06)
            &gpio1 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)  // Row 1 (P1.15)
            &gpio1 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)  // Row 2 (P1.13)
            &gpio1 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)  // Row 3 (P1.11)
        >;
    };

    // Widget for Layer Status
    layer_status: layer_status {
        compatible = "zmk,layer-status";
        status = "okay";
        // Optionally, you can add properties for this widget (e.g., position, color, etc.)
        x = <0>;
        y = <0>;
        color = <0xFFFFFF>;  // White color for example
    };

    // Widget for Battery Status
    battery_status: battery_status {
        compatible = "zmk,battery-status";
        status = "okay";
        // Additional properties such as display format, color, etc. can be specified.
        x = <50>;
        y = <0>;
        color = <0xFF0000>;  // Red color as an example
    };

    // Widget for Output Status
    output_status: output_status {
        compatible = "zmk,output-status";
        status = "okay";
        // Similar display properties can be added here.
        x = <100>;
        y = <0>;
        color = <0x00FF00>;  // Green color as an example
    };

    // NiceView behavior configuration
    nice_view_behavior: behavior_nice_view {
        compatible = "zmk,behavior-nice-view"; // Define behavior for the NiceView
        #binding-cells = <0>;   // No binding cells needed for behavior
        display = <&nice_view>; // Point to the NiceView display
        widgets = <
            &layer_status
            &battery_status
            &output_status
        >; // Define the widgets for display
    };
};
